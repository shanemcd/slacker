"""Authentication and credential management"""

import json
import sys
from pathlib import Path
from playwright.sync_api import sync_playwright


def get_default_auth_file():
    """Get the default auth file path

    Returns:
        str: Path to default credentials file
    """
    config_dir = Path.home() / '.config' / 'slacker'
    return str(config_dir / 'credentials')


def read_auth_file(auth_file):
    """Read credentials from auth file

    Args:
        auth_file: Path to credentials file

    Returns:
        dict: Credentials with 'token' and 'cookie' keys

    Raises:
        SystemExit: If file not found or cannot be parsed
    """
    auth_path = Path(auth_file)

    if not auth_path.exists():
        print(f"Error: Auth file not found: {auth_file}")
        print(f"\nRun 'slacker login <workspace-url>' first to extract credentials")
        sys.exit(1)

    content = auth_path.read_text()

    # Parse the shell script format
    token = None
    cookie = None

    for line in content.split('\n'):
        line = line.strip()
        if line.startswith('export SLACK_TOKEN='):
            token = line.split('=', 1)[1].strip('"\'')
        elif line.startswith('export SLACK_COOKIE='):
            cookie = line.split('=', 1)[1].strip('"\'')

    if not token or not cookie:
        print(f"Error: Could not parse credentials from {auth_file}")
        sys.exit(1)

    return {'token': token, 'cookie': cookie}


def save_credentials(credentials, output_file):
    """Save credentials to a file

    Args:
        credentials: Dict with 'cookie' and 'tokens' keys
        output_file: Path to save credentials

    Returns:
        str: The file content that was written
    """
    # Ensure the parent directory exists
    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # Create shell script format
    output = "# Slack Authentication Credentials\n"
    output += f"# Generated by slacker\n\n"
    output += f'export SLACK_COOKIE="{credentials["cookie"]}"\n\n'

    # Export first token (or let user choose if multiple)
    first_team = list(credentials['tokens'].keys())[0]
    first_token = credentials['tokens'][first_team]['token']

    output += f'# Team: {first_team}\n'
    output += f'export SLACK_TOKEN="{first_token}"\n\n'

    # If multiple teams, add comments with others
    if len(credentials['tokens']) > 1:
        output += "# Other teams:\n"
        for team_name, data in credentials['tokens'].items():
            if team_name != first_team:
                output += f'# export SLACK_TOKEN="{data["token"]}"  # {team_name}\n'
        output += "\n"

    # Write to file
    output_path.write_text(output)
    output_path.chmod(0o600)  # Make it readable only by owner

    return output


def extract_slack_credentials(workspace_url, headless=False):
    """Open Slack in a browser, wait for user to log in, then extract credentials.

    Args:
        workspace_url: Slack workspace URL (e.g., https://myworkspace.slack.com)
        headless: Run browser in headless mode (default: False for manual login)

    Returns:
        dict: Credentials with 'cookie' and 'tokens' keys, or None if extraction failed
    """
    print(f"Opening browser to {workspace_url}")
    print("Please log in to Slack in the browser window that opens...")
    print("Once you see your workspace, press Enter here to extract credentials.")

    with sync_playwright() as p:
        # Launch browser (visible so user can log in)
        browser = p.chromium.launch(headless=headless)
        context = browser.new_context()
        page = context.new_page()

        # Navigate to Slack
        page.goto(workspace_url)

        # Wait for user to log in
        if not headless:
            input("\nPress Enter after you've logged in and see your Slack workspace...")
        else:
            # In headless mode, wait for the page to load
            page.wait_for_load_state('networkidle')

        # Extract token from localStorage
        tokens = {}
        try:
            local_config = page.evaluate('localStorage.getItem("localConfig_v2")')
            if local_config:
                config = json.loads(local_config)
                teams = config.get('teams', {})

                for team_id, team_data in teams.items():
                    if 'token' in team_data:
                        team_name = team_data.get('name', team_id)
                        tokens[team_name] = {
                            'token': team_data['token'],
                            'team_id': team_id
                        }
        except Exception as e:
            print(f"Warning: Could not extract from localStorage: {e}")

        # Try alternative method via window.TS
        if not tokens:
            try:
                api_token = page.evaluate('window.TS?.boot_data?.api_token')
                team_id = page.evaluate('window.TS?.boot_data?.team_id')
                if api_token:
                    tokens['current'] = {
                        'token': api_token,
                        'team_id': team_id or 'unknown'
                    }
            except Exception as e:
                print(f"Warning: Could not extract from window.TS: {e}")

        # Extract cookies
        cookies = context.cookies()
        d_cookie = None
        for cookie in cookies:
            if cookie['name'] == 'd':
                d_cookie = cookie['value']
                break

        browser.close()

        # Check if we got everything
        if not tokens:
            print("Error: Could not extract token. Make sure you're logged in.")
            return None

        if not d_cookie:
            print("Error: Could not extract 'd' cookie. Make sure you're logged in.")
            return None

        # Prepare output
        credentials = {
            'cookie': d_cookie,
            'tokens': tokens
        }

        return credentials
